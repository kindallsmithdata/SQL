# Background: For this project, I downloaded Spotify data from Kaggle. Then I created a table to insert Spotify data into
and performed SQL to analyze the data.

#First, I created the table in SQLiteStudio:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I analyzed the data using SQL: 


#Who are the top 5 artists by popularity? 

SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 5;

#Does Dua Lipa have multiple songs in the Spotify Top 50? 

SELECT track_name
FROM spotifydata
WHERE artist_name LIKE '%Dua Lipa%';

#What is the average musical tempo for the songs in the Top 50 on Spotify?

SELECT AVG(tempo)
FROM spotifydata;

*This query result shows as a decimal and in music, we don't represent tempos as decimals, therefore, we need to ROUND the
result to get an accurate tempo marking: 

SELECT ROUND(AVG(tempo))
FROM spotifydata;
