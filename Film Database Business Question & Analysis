#Background - I used a provided film database in PostgreSQL. I created my own DETAIL and SUMMARY tables to answer an original business question of my choosing. This project also highlights the use of triggers and stored procedures using a hypothetical job scheduler. 

#DVDBuster, a national DVD rental store, is contemplating a major facelift of the company due to poor profit margins in the last several years. The goal of the re-brand is to become more competitive with big name streaming platforms that don’t have physical brick-and-mortar stores. The CEO has asked all managers nationwide to submit feedback to improve the quality of the customer experience at the local levels. Todd, the manager of the Deeveedeeville DVDBuster store, saw the local news do a story on the rapid demographic shift happening within their small town. With this demographic change, Todd has had an influx of customers requesting foreign language films. Todd knows that his local store does not carry any foreign language films but wants to find out if he can borrow foreign language films from other stores within nationwide inventory. He must employ the use of a graphical user interface and database management system (DBMS) to query this information. 

#A. Business Question - Unfamiliar with foreign language films himself, Todd looks to answer the business question “What languages are currently represented in our (company-wide) film inventory?” to better serve his local clientele and to give his company a competitive edge against big name streaming services. Todd has outsourced this project with his lucrative budget and hired our company, MusicalDataPeople, to help him with the task of navigating the company’s DBMS. This report serves to summarize our findings for all stakeholders involved. 

#A1/A2

#*All code in this business plan has been verified execute accurately in real-time in pgAdmin4 (local installation) and in the pfAdmin4 lab environment*

#DETAIL TABLE FIELDS

film_id INT PRIMARY KEY – This is a unique Primary Key that is given to identify each film in the company’s inventory (pulled from the film table). This is important to include in the table for stakeholders because it is the unique identifier of each film and a quick, streamlined means to lookup each film in the inventory. 
title VARCHAR(255) – This is the title of the film (pulled from the film table). This is important to include in the table for stakeholders because it gives the title of the film, which is often needed when searching a database for customers and inventory updates. 
description TEXT – This is a detailed text description of what the film is about (pulled from the film table). This is important to include in the table for stakeholders because it describes what the movie is about, which is often pertinent information for when customers are decided which DVD to rent. 
release_year INT – This is the year that the film was released (pulled from the film table). This is important to include in the table for stakeholders because it gives an idea of time/genre of films as well as critical information to having newer films to stay relevant in today’s market. 
language_id SMALLINT– This is the language_id of each film (pulled from the language table).This is important to include in the table for stakeholders because the language_id is referenced to one of the 6 languages in the database (English, Italian, Japanese, Mandarin, French, German), notifying the customer of the availability of films in each language. Ideally, the company should strive for more languages offered in the future. 
language CHAR(20) – This is the name of the language of the film (pulled from the language table). This is important to include in the table for stakeholders because it translates/references the language_ids into the actual name of each language that the id is referring to. Without this information, the language_id is of no use unless the film was watched to determine the language. 
length_in_minutes SMALLINT – This is the length in minutes of the film (pulled from the film table). This is important to include in the table for stakeholders because customers often pick films based on runtime/scheduling. 
rating MPAA_RATING – This is the rating of the film using the MPAA rating scale. This is important to include in the table for stakeholders because this will help categorize the audience and what movies are appropriate for various age groups. 
last_update TIMESTAMP – This is the last time that the film information was updated in the company database. This is important to include in the table for stakeholders because this will help them with inventory updates and keeping update information clean. 

#SUMMARY TABLE FIELDS

language_id SMALLINT - This is the language_id of each film as referenced in the language table (there are 6 language_ids). This is important to include in the table for stakeholders because the language_id is referenced to one of the 6 languages in the database (English, Italian, Japanese, Mandarin, French, German), notifying the customer of the availability of films in each language. Ideally, the company should strive for more languages offered in the future.
number_of_films INT – This is the total count of films (by film_id) that hold each language_id (1-6). This is important to include in the table for stakeholders because is a quick way to lookup the total number of films in each language within the inventory. 

#A3

#The language and film tables from the dvdrental database will be used for the detail and summary tables of this report. 

#The data from these tables is accessed using the following code:

SELECT *
FROM language;

SELECT *
FROM film;


#A4

#The demographic of Todd’s location is heavily Asian with increasing numbers of Japanese and Chinese (Mandarin speaking) people moving into the area monthly. Todd wants to get a specific look at the number of Japanese and Mandarin films in the inventory. The language_id field within the detail table (language_detailed_table) can be transformed with a user defined function to determine exactly how many Japanese (language_ id = 3) and Mandarin (language_id = 4) films are in the inventory currently. This is important information to have so that Todd can fulfill the needs of his local customer base. A user defined function could be created in every language in the inventory and would be a useful tool for quickly scanning foreign language inventory numbers. As inventory numbers in each foreign language (ideally) increase, this will be a useful tool for all stakeholders involved. 

#A5

#The business use for these tables will be to easily identify each title in the company’s inventory (by both title and film_id) along with its language (by language_id). The detail table includes other important information (e.g. description, runtime, etc.) that could be useful to the customer, manager, or store employee as they are searching for foreign language titles. More specifically, this information gives the manager a deeper look into what types of foreign language films are currently in the company inventory and how to relevantly update the inventory in the future. More details about business uses are outlined in A1/A2 above. 
To get a summarized view of the data, we will use the aggregate COUNT of each language_id  in the language_detailed_table  by using the COUNT function. This streamlines the data into one single table. The business use for this table will be to quickly obtain a COUNT of the number of titles in each language (ordered by language_id). 
Both the detail and summary tables will help support the business question directly with accurate, real-time data of what films they currently have in each language. The detail table proves to have more information (e.g. the title of each film) while the summary table provides a raw look at the actual number of films in the inventory organized by language. Through analyzation of this data, Todd (and any stakeholder) will determine that DVDBuster only contains films that are in English. While the inventory includes multiple language_ids (English, Italian, Japanese, Mandarin, French, German), no films in any foreign language exist currently in the inventory. Todd will present this information to the CEO of DVDBuster to increase representation in the local and nationwide inventories in languages besides English. The customers will benefit immensely from this because it will serve the diverse population locally as well as nationally, thus becoming a more competitive market with leading competitors. 

#A6

#The data will be refreshed at 6am every weekday to ensure that all previous day and overnight updates to the inventory are included in the day’s inventory. Most inventory updates occur in the late afternoons (2-4pm EST) by national inventory managers, however some mass updates occur overnight. These personnel are responsible for updating the DBMS as well as sending products (films) directly to the locations as needed. This is not the job of the local store managers typically, although a manager can request that a film title is added to the inventory. It is necessary to have daily updates to the inventory as customers are constantly coming in and requesting films during open hours (10am-10pm). 
When a customer comes into the store and requests a particular foreign language title, the store employee/manager needs to be able to access the database and tell the customer immediately if the title is available within their store or through acquiring it through the national company inventory. 


#B

#Japanese 

CREATE OR REPLACE FUNCTION total_japanese_film_count()
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
japanese_film_count SMALLINT;
BEGIN
	SELECT COUNT(film_id)
	INTO japanese_film_count
	FROM language_detailed_table
	WHERE language_id = 3;
RETURN japanese_film_count;
END;
$$;

#Mandarin

CREATE OR REPLACE FUNCTION total_mandarin_film_count()
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
mandarin_film_count SMALLINT;
BEGIN
	SELECT COUNT(film_id)
	INTO mandarin_film_count
	FROM language_detailed_table
	WHERE language_id = 4;
RETURN mandarin_film_count;
END;
$$;

#C/D

#DETAIL TABLE 

CREATE TABLE language_detailed_table (
      film_id INT PRIMARY KEY,
      title VARCHAR(255),
      description TEXT,
      release_year INT,
      language_id SMALLINT,
	 language CHAR(20),
      length_in_minutes SMALLINT,
      rating MPAA_RATING,
      last_update TIMESTAMP
);

INSERT INTO language_detailed_table
SELECT f.film_id, f.title, f.description, f.release_year, l.language_id, l.name AS language, f.length AS length_in_minutes, f.rating, f.last_update
FROM language l
JOIN film f
ON f.language_id = l.language_id
ORDER BY f.film_id, l.language_id;

SELECT * FROM language_detailed_table; 

#SUMMARY TABLE

CREATE TABLE language_summary_table (
language_id SMALLINT,
number_of_films INT
);

INSERT INTO language_summary_table 
SELECT language_id, COUNT(film_id)
FROM language_detailed_table
GROUP BY language_id;

SELECT * FROM language_summary_table; 

#E

CREATE OR REPLACE FUNCTION insert_trigger_function()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
DELETE FROM language_summary_table;
INSERT INTO language_summary_table
SELECT language_id, COUNT(film_id)
FROM language_detailed_table
GROUP BY language_id;
RETURN NEW;
END;
$$;

CREATE TRIGGER language_count_update
	AFTER INSERT
	ON language_detailed_table
	FOR EACH STATEMENT
	EXECUTE PROCEDURE insert_trigger_function();


#F

CREATE OR REPLACE PROCEDURE refresh_language_inventory()
LANGUAGE plpgsql
AS $$
BEGIN
DELETE FROM language_detailed_table;
DELETE FROM language_summary_table;
INSERT INTO language_detailed_table
SELECT f.film_id, f.title, f.description, f.release_year, l.language_id, l.name AS language, f.length AS length_in_minutes, f.rating, f.last_update
FROM language l
JOIN film f
ON f.language_id = l.language_id
ORDER BY f.film_id, l.language_id;
INSERT INTO language_summary_table 
SELECT language_id, COUNT(film_id)
FROM language_detailed_table
GROUP BY language_id;
RETURN;
END;
$$;

CALL refresh_language_inventory();

#F1

#The job scheduling tool Agent pgAgent will be used to automate this stored procedure in pgAdmin4. The data will be refreshed at 6am every weekday to ensure that all previous day and overnight updates to the inventory are included in the day’s inventory. Most inventory updates occur in the late afternoons (2-4pm EST) by national inventory managers, and they typically do all local inventory updates. This includes sending new films on to the locations after updating the DBMS. This is not the job of the manager typically, although a manager can request that a film title is added to the inventory. It is necessary to have daily updates to the inventory as customers are constantly coming in and requesting films during open hours (10am-10pm). 
























